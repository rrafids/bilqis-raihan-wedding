name: Deploy Next.js site to Pages

on:
  push:
    branches: ['master']
  workflow_dispatch:

permissions:
  contents: read
  pages: write
  id-token: write

concurrency:
  group: 'pages'
  cancel-in-progress: false

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v3
      - name: Detect package manager
        id: detect-package-manager
        run: |
          if [ -f "${{ github.workspace }}/yarn.lock" ]; then
            echo "manager=yarn" >> $GITHUB_OUTPUT
            echo "command=install" >> $GITHUB_OUTPUT
            echo "runner=yarn" >> $GITHUB_OUTPUT
          elif [ -f "${{ github.workspace }}/package.json" ]; then
            echo "manager=npm" >> $GITHUB_OUTPUT
            echo "command=ci" >> $GITHUB_OUTPUT
            echo "runner=npx --no-install" >> $GITHUB_OUTPUT
          else
            echo "Unable to determine package manager"
            exit 1
          fi
      - name: Setup Node
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: ${{ steps.detect-package-manager.outputs.manager }}
      - name: Setup Pages
        uses: actions/configure-pages@v3
        with:
          static_site_generator: next
      - name: Restore cache
        uses: actions/cache@v3
        with:
          path: .next/cache
          key: ${{ runner.os }}-nextjs-${{ hashFiles('**/package-lock.json', '**/yarn.lock') }}-${{ hashFiles('**.[jt]s', '**.[jt]sx') }}
          restore-keys: |
            ${{ runner.os }}-nextjs-${{ hashFiles('**/package-lock.json', '**/yarn.lock') }}-
      - name: Install dependencies
        run: ${{ steps.detect-package-manager.outputs.manager }} ${{ steps.detect-package-manager.outputs.command }}
      - name: Build with Next.js
        run: ${{ steps.detect-package-manager.outputs.runner }} next build
      - name: Prepare artifact
        run: |
          # Create a fresh temporary directory
          TEMP_DIR=$(mktemp -d)
          echo "Using temporary directory: $TEMP_DIR"
          
          # Create .nojekyll file
          touch "$TEMP_DIR/.nojekyll"
          
          # Copy files individually to avoid symlink issues
          echo "Copying files..."
          cd out
          find . -type f -exec sh -c '
            mkdir -p "$0/$(dirname "{}")"
            cp -P "{}" "$0/{}"
          ' "$TEMP_DIR" \;
          
          # Go to workspace root before verification
          cd ${{ github.workspace }}
          
          # Verify the contents
          echo "Verifying copied files..."
          find "$TEMP_DIR" -type f | sort
          
          # Check for any remaining symlinks
          echo "Checking for symlinks..."
          if find "$TEMP_DIR" -type l | grep .; then
            echo "Error: Symlinks found!"
            exit 1
          fi
          
          # Show total size
          echo "Total size:"
          du -sh "$TEMP_DIR"
          
          # Move to final location
          rm -rf out_resolved
          mv "$TEMP_DIR" out_resolved
      - name: Upload artifact
        uses: actions/upload-artifact@v4
        with:
          name: github-pages
          path: out_resolved
          compression-level: 9

  deploy:
    environment:
      name: github-pages
      url: ${{ steps.deployment.outputs.page_url }}
    runs-on: ubuntu-latest
    needs: build
    steps:
      - name: Deploy to GitHub Pages
        id: deployment
        uses: actions/deploy-pages@v4
        with:
          artifact_name: github-pages
